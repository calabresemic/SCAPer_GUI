##requires -version 5
<#
.SYNOPSIS
  Initial script for launching the SCAPer tool.
.DESCRIPTION
  Launches the script with the parameter SCAP when pressing the RUN SCAP button.
  Also launches the script to generate the json files and new scripts.
  The requires block is commented out to allow me to display a message to the user.
.INPUTS
  None
.OUTPUTS
  None
.NOTES
  Version:        1.0
  Author:         Michael Calabrese
  Creation Date:  1/25/2022
  Edit Date:      1/26/2022
  Purpose/Change: Initial script development
  ToDo List: 
    - Priority 1 is to use something other than win32_addremoveprogram when SCCM not installed.
	- Priority 2 is to clean up the handling of exchange server rights. Maybe a manual entry array.
	- Priority 3 is to get the UI looking nicer.
  #>

[System.Reflection.Assembly]::LoadWithPartialName("PresentationFramework") | Out-Null

if($PSVersionTable.PSVersion -lt [version]'5.0') {
    $badVersionMessage = 'PowerShell 5.0. is required to run this program.' + [System.Environment]::NewLine +
        'Install the KB that corresponds to your system:' + [System.Environment]::NewLine +
        'Windows Server 2012 R2: KB3191564'+ [System.Environment]::NewLine +
        'Windows Server 2012: KB3191565'
    [System.Windows.Forms.MessageBox]::Show($badVersionMessage,'You have an ollddddd PS version, yo','OK','Error')
    exit
}

#region functions generated by PowerShell Pro Tools
#This is really excessive and you should probably not do WPF and PS together.
function Add-ControlVariables {
	New-Variable -Name 'launchWindow' -Value $window.FindName('launchWindow') -Scope 1 -Force
	New-Variable -Name 'closeButton' -Value $window.FindName('closeButton') -Scope 1 -Force
	New-Variable -Name 'runScapButton' -Value $window.FindName('runScapButton') -Scope 1 -Force
	New-Variable -Name 'importACASButton' -Value $window.FindName('importACASButton') -Scope 1 -Force
	New-Variable -Name 'createJsonButton' -Value $window.FindName('createJsonButton') -Scope 1 -Force
	New-Variable -Name 'updateModulesButton' -Value $window.FindName('updateModulesButton') -Scope 1 -Force
}

function Import-Xaml {
	[xml]$xaml = Get-Content -Path "$PSScriptRoot\Source\LaunchWindow.xaml"
	$manager = New-Object System.Xml.XmlNamespaceManager -ArgumentList $xaml.NameTable
	$manager.AddNamespace("x", "http://schemas.microsoft.com/winfx/2006/xaml");
	$xaml.SelectNodes("//*[@x:Name='launchWindow']", $manager)[0].RemoveAttribute('MouseLeftButtonDown')
	$xaml.SelectNodes("//*[@x:Name='closeButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='runScapButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='importACASButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='createJsonButton']", $manager)[0].RemoveAttribute('Click')
	$xaml.SelectNodes("//*[@x:Name='updateModulesButton']", $manager)[0].RemoveAttribute('Click')
	$xamlReader = New-Object System.Xml.XmlNodeReader $xaml
	[Windows.Markup.XamlReader]::Load($xamlReader)
}

function Set-EventHandler {

	$launchWindow.add_MouseLeftButtonDown({
		launchWindow_MouseLeftButtonDown
	})

	$closeButton.add_Click({
		closeButton_Click
	})

	$runScapButton.add_Click({
		runScapButton_Click
	})

	$importACASButton.add_Click({
		importACASButton_Click
	})

	$createJsonButton.add_Click({
		createJsonButton_Click
	})

	$updateModulesButton.add_Click({
		updateModulesButton_Click
	})
}
#endregion functions generated by PowerShell Pro Tools

#region event functions
function launchWindow_MouseLeftButtonDown
{
	#Just allows the form to respond to dragging.
	$window.DragMove()
}

function closeButton_Click
{
	$window.close()
}

function runScapButton_Click
{
	. (Join-Path $sourceFolder 'SCAPer.ps1')
	$window.close()
}

function importACASButton_Click
{
	. (Join-Path $sourceFolder 'Import_ACAS_Sans.ps1')
	$window.close()
}

function createJsonButton_Click
{
	. (Join-Path $sourceFolder 'Create-JSON.ps1')
}

function updateModulesButton_Click
{
	. (Join-Path $sourceFolder 'ModuleUpdater.ps1')
}
#endregion event functions

#Initialize Variables
if([bool]$psISE) {
	$Global:rootPath = Split-Path $psISE.CurrentFile.FullPath -Parent
} else {
	$Global:rootPath = $PSScriptRoot
}

$Global:checklistFolder = Join-Path $rootPath 'Checklists'
$Global:logFolder = Join-Path $rootPath 'Logs'
$Global:moduleUpdaterFolder = Join-Path $rootPath 'ModuleUpdater'
$Global:orgSettingsFolder = Join-Path $rootPath 'OrgSettings'
$Global:sourceFolder = Join-Path $rootPath 'Source'
$Global:STIGFolder = Join-Path $rootPath 'STIGS'

#Initialize directories
if(!(Test-Path $logFolder)) {
	New-Item $logFolder -ItemType Directory | Out-Null
}

#Show GUI
$window = Import-Xaml
Add-ControlVariables
Set-EventHandler
$window.ShowDialog()